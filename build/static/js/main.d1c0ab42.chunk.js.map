{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dayjs","extend","relativeTime","issueIcon","react_default","a","createElement","viewBox","version","width","height","aria-hidden","fill","fillRule","d","Header","className","IssueRow","_ref","issue","userLoginName","user","login","createdTimeAgo","to","created_at","subtitle","concat","id","title","href","App","state","data","search","event","this","setState","target","value","_this2","fetch","then","response","json","console","log","catch","ex","length","type","onChange","updateSearch","bind","map","App_IssueRow","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAMAA,IAAMC,OAAOC,KAEb,IAAMC,EACJC,EAAAC,EAAAC,cAAA,OACEC,QAAQ,YACRC,QAAQ,MACRC,MAAM,KACNC,OAAO,KACPC,cAAY,OACZC,KAAK,WAELR,EAAAC,EAAAC,cAAA,QACEO,SAAS,SACTC,EAAE,wLAKFC,EACJX,EAAAC,EAAAC,cAAA,UAAQU,UAAU,cAEVZ,EAAAC,EAAAC,cAAA,OACEI,OAAO,KACPM,UAAU,UACVT,QAAQ,YACRC,QAAQ,MACRC,MAAM,KACNE,cAAY,QAEZP,EAAAC,EAAAC,cAAA,QACEO,SAAS,UACTC,EAAE,gkBAZd,UAkBIG,EAAW,SAAAC,GAEX,IADJC,EACID,EADJC,MAEMC,EAAgBD,EAAME,KAAKC,MAC3BC,EAAiBvB,MAAQwB,GAAGxB,IAAMmB,EAAMM,aACxCC,EAAQ,KAAAC,OAAQR,EAAMS,GAAd,YAAAD,OAA2BJ,EAA3B,QAEd,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKU,UAAU,aACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,cAAcb,GAC7BC,EAAAC,EAAAC,cAAA,OAAKU,UAAU,cACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,eAAeG,EAAMU,OACpCzB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,kBACZU,EACDtB,EAAAC,EAAAC,cAAA,KACEwB,KAAI,kEAAAH,OAAoEP,IAEvE,IAEAA,QAiFAW,6MAhEbC,MAAQ,CACNC,MAAM,EACNC,OAAQ,yFAGGC,GAGXC,KAAKC,SAAS,CAACH,OAASC,EAAMG,OAAOC,oDAMnB,IAAAC,EAAAJ,KAClBK,MAAM,iEACHC,KAAK,SAASC,GAEb,OAAOA,EAASC,SAEjBF,KAAK,SAAAE,GACJJ,EAAKH,SAAS,CAAEJ,KAAMW,IACtBC,QAAQC,IAAI,cAAeF,KAE5BG,MAAM,SAASC,GACdH,QAAQC,IAAI,iBAAkBE,sCAI3B,IACCf,EAASG,KAAKJ,MAAdC,KAER,OAAKA,GAASA,EAAKgB,OAWjB7C,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,SACE4C,KAAK,OACLX,MAAOH,KAAKJ,MAAME,OAClBiB,SAAUf,KAAKgB,aAAaC,KAAKjB,QAGnChC,EAAAC,EAAAC,cAAA,OAAKU,UAAU,gBACZiB,EAAKqB,IAAI,SAAAnC,GAAK,OACbf,EAAAC,EAAAC,cAACiD,EAAD,CAAUC,IAAG,GAAA7B,OAAKR,EAAMS,GAAX,eAA4BT,MAAOA,QApB/Cf,EAAAC,EAAAC,cAAA,OAAKU,UAAU,UAAf,qBAzCKyC,aC5DEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.d1c0ab42.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\n// import SearchBar from \"./components/searchBar\";\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nconst issueIcon = (\r\n  <svg\r\n    viewBox=\"0 0 14 16\"\r\n    version=\"1.1\"\r\n    width=\"14\"\r\n    height=\"16\"\r\n    aria-hidden=\"true\"\r\n    fill=\"#28a745\"\r\n  >\r\n    <path\r\n      fillRule=\"evenod\"\r\n      d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nconst Header = \r\n  <header className=\"App-header\">\r\n          {/* // TODO: export elements/tags eg svg / code split */}\r\n          <svg\r\n            height=\"32\"\r\n            className=\"octicon\"\r\n            viewBox=\"0 0 16 16\"\r\n            version=\"1.1\"\r\n            width=\"32\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"\r\n            />\r\n          </svg>\r\n          GitHub\r\n        </header>;\r\n\r\nconst IssueRow = ({\r\n  issue // ? why the comma? seems to work without?\r\n}) => {\r\n  const userLoginName = issue.user.login;\r\n  const createdTimeAgo = dayjs().to(dayjs(issue.created_at));\r\n  const subtitle = `# ${issue.id} opened ${createdTimeAgo} by `;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"issue-row\">\r\n        <div className=\"issue-icon\">{issueIcon}</div>\r\n        <div className=\"issue-text\">\r\n          <div className=\"issue-title\">{issue.title}</div>\r\n          <div className=\"issue-subtitle\">\r\n            {subtitle}\r\n            <a\r\n              href={`https://github.com/facebook/create-react-app/issues/created_by/${userLoginName}`}\r\n            >\r\n              {\" \"}\r\n              {/* todo change href destiantion */}\r\n              {userLoginName}\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass App extends Component {\r\n  // constructor() {\r\n  //   super();\r\n  //   this.state = {\r\n  //     search: 'Level Up'\r\n  //   };\r\n  // }\r\n  \r\n  state = {\r\n    data: false,\r\n    search: \"Search...\"//\"is:issue is:open\"\r\n  };\r\n\r\n  updateSearch(event) {\r\n    // console.log(event.target.value);\r\n    // const searchText = event.target.value;\r\n    this.setState({search : event.target.value});\r\n    // console.log('event.target.value  : ',event.target.value);\r\n    // console.log('this.state.search : ', this.state.search);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.github.com/repos/facebook/create-react-app/issues\")\r\n      .then(function(response) {\r\n        // console.log(response); //where is the data in the response that the json will use?\r\n        return response.json();\r\n      })\r\n      .then(json => {\r\n        this.setState({ data: json });\r\n        console.log(\"parsed json\", json);\r\n      })\r\n      .catch(function(ex) {\r\n        console.log(\"parsing failed\", ex);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n\r\n    if (!data || !data.length) {\r\n      return <div className=\"loader\">Loading...</div>; //todo loader svg now\r\n    }\r\n\r\n    // let filteredData = data.filter(\r\n    //   (issue) => {\r\n    //     return issue.user.indexOf(this.state.search) != -1;\r\n    //   }\r\n    // );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <input \r\n          type=\"text\" \r\n          value={this.state.search} \r\n          onChange={this.updateSearch.bind(this)}\r\n        />\r\n\r\n        <div className=\"issues-table\">\r\n          {data.map(issue => (\r\n            <IssueRow key={`${issue.id} _issue_row`} issue={issue} />\r\n          ))}\r\n          {/* // todo check why use key */}\r\n        </div>\r\n{/* // {console.log('IssueRow -------------', data.issue)} */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}